# -*- coding: utf-8 -*-
"""
  <auto-generated>
    This code was generated by a tool.
    Changes to this file may cause incorrect behavior and will be lost if
    the code is regenerated.
  </auto-generated>
"""

from enum import Enum


class itemEQuality(Enum):
    """
    最差品质
    """

    WHITE = 1
    """
    蓝色的
    """
    BLUE = 2
    """
    紫色的
    """
    PURPLE = 3
    """
    最高品质
    """
    RED = 4


class testAccessFlag(Enum):
    WRITE = 1
    READ = 2
    TRUNCATE = 4
    NEW = 8
    """
    位标记使用示例
    """
    READ_WRITE = WRITE | READ


class Item:
    def __init__(self, _json_):
        self.id = _json_["id"]
        self.name = _json_["name"]
        self.desc = _json_["desc"]
        self.price = _json_["price"]
        self.upgrade_to_item_id = _json_["upgrade_to_item_id"]
        if _json_.get("expire_time") != None:
            self.expire_time = _json_["expire_time"]
        self.batch_useable = _json_["batch_useable"]
        self.quality = _json_["quality"]
        self.exchange_stream = itemItemExchange(_json_["exchange_stream"])
        self.exchange_list = []
        for _ele in _json_["exchange_list"]:
            _e = itemItemExchange(_ele)
            self.exchange_list.append(_e)
        self.exchange_column = itemItemExchange(_json_["exchange_column"])


class itemItemExchange:
    def __init__(self, _json_):
        self.id = _json_["id"]
        self.num = _json_["num"]


class imageStyle:
    def __init__(self, _json_):
        self.key = _json_["key"]
        self.name = _json_["name"]
        self.prompt = _json_["prompt"]
        self.negative_prompt = _json_["negative_prompt"]


class imageStoryType:
    def __init__(self, _json_):
        self.type = _json_["type"]
        self.upgrade_to_item_id = []
        for _ele in _json_["upgrade_to_item_id"]:
            _e = _ele
            self.upgrade_to_item_id.append(_e)


class itemTbItem:
    def __init__(self, _json_):
        self._dataMap = {}
        self._dataList = []

        for _json2_ in _json_:
            _v = Item(_json2_)
            self._dataList.append(_v)
            self._dataMap[_v.id] = _v

    def getDataMap(self):
        return self._dataMap

    def getDataList(self):
        return self._dataList

    def get(self, key):
        return self._dataMap.get(key)


class imageTbStyle:
    def __init__(self, _json_):
        self._dataMap = {}
        self._dataList = []

        for _json2_ in _json_:
            _v = imageStyle(_json2_)
            self._dataList.append(_v)
            self._dataMap[_v.key] = _v

    def getDataMap(self):
        return self._dataMap

    def getDataList(self):
        return self._dataList

    def get(self, key):
        return self._dataMap.get(key)


class imageTbStoryType:
    def __init__(self, _json_):
        self._dataMap = {}
        self._dataList = []

        for _json2_ in _json_:
            _v = imageStoryType(_json2_)
            self._dataList.append(_v)
            self._dataMap[_v.type] = _v

    def getDataMap(self):
        return self._dataMap

    def getDataList(self):
        return self._dataList

    def get(self, key):
        return self._dataMap.get(key)


class cfg_Tables:
    def __init__(self, loader):
        self.TbItem = itemTbItem(loader("item_tbitem"))
        self.TbStyle = imageTbStyle(loader("image_tbstyle"))
        self.TbStoryType = imageTbStoryType(loader("image_tbstorytype"))
